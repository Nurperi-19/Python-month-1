# 1. Написать функцию “Чётное-Нечётное”
def even_or_odd(number):    # У функции должен быть один обязательный параметр - целое число.
    if number != int(number):
        return None         # Если переданный аргумент не является целым числом, вернуть None.
    elif number % 2 == 0:
        return True         # Функция должна вернуть True, если переданный аргумент чётное число или False, если нечётное.
    else:
        return False
# Тест:
print('Чётное-Нечётное:', even_or_odd(100))
print('Чётное-Нечётное:', even_or_odd(101))
print('Чётное-Нечётное:', even_or_odd(99.9))

# 2. Написать функцию “Правописание на минималках”.
# Функция должна принимать предложение, затем возвращать его если оно начинается с заглав. буквы и заканчивается точкой
def spelling_on_min(sentence):
    if sentence.startswith(sentence.capitalize()) and sentence.endswith('.'):
        return sentence
    else:                   # В противном случае вернуть строку с подсказкой.
        return 'Предложение должно начинаться с заглавной буквы и заканчиваться точкой!'
# Тест:
print('Правописание на мин.:', spelling_on_min('Например, это предложение с заглавной буквой и точкой в конце.'))
print('Правописание на мин.:', spelling_on_min('в противном случае вернуть строку с подсказкой'))

# 3. Написать функцию “Среднее арифметическое”.
def average(*args):                     # Использовать звёздочку для обозначения последовательности аргументов.
    return round(sum(args)/len(args))   # Среднее арифметическое должно быть в виде целого числа.
# Тест:
print('Среднее Арифметическое:', average(1.9, 2.3, 3.9, 4.9, 5))

# 4. Написать функцию “Ближайшее Число”.
def closest_number(list, number = float(19)): # Функция должна принимать два параметра: 1)список или кортеж - состоящий
    closest = [abs(i-number) for i in list]   # из цел. или дроб. чисел (обяз. парам.) 2)цел. или дроб. число (парам. по умол.)
    nearest = list[closest.index(min(closest))]
    return nearest                  # Функция должна вернуть чис. из последов., которое ближе всего к указанному.
# Тест:
lst = [8, 9, 9.5, 11, 22.8]
target = 12.5
print(lst, target, '==', closest_number([8, 9, 9.5, 11, 22.8], 12.5))
